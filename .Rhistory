# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# change gender to binary 1 and 0
churn$Gender <- ifelse( Gender == "Male", 1, 0 )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# change gender to binary 1 and 0
churn$Gender <- ifelse( churn$NewGender == "Male", 1, 0 )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# view structure
str(churn)
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# view data
head(churn)
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
set.seed(123)
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# view data
head(churn)
# cleaning the data
set.seed(123)
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# view data
head(churn)
# view structure
str(churn)
install.packages("reshape2")
library(tidyverse)
library(reshape2)
# create a correlation heat map
corr <- round( cor(churn), 2 )
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') ) %>%
mutate(Gender = as.numeric(Gender))
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') ) %>%
mutate(Gender = as.numeric(Gender))
# view data
head(churn)
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# view data
head(churn)
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# view data
head(churn)
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "red", size = 4)
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
labs( title= "Correlation Heat Map", xlab=" ", ylab=" ")
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "orange", high = "red",
limit = c(-1,1), name="Correlation", mid = "yellow") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "grey", high = "darkred",
limit = c(-1,1), name="Correlation", mid = "orange") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "grey", high = "darkred",
limit = c(-1,1), name="Correlation", mid = "orange") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank()) +
labs( title = "Correlation Heat Map")
heat_map
heat_map
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
library(tidyverse)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
View(marathon)
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
marathon <- marathon %>%
select(c(-Name, -Marathon))
head(marathon)
as.numeric(marathon$Wall21)
head(marathon)
marathon$Wall21[marathon$Wall21 == ""] <- "None"
head(marathon)
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
head(marathon)
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
head(marathon)
head(marathon)
view(marathon)
gender_age <- ggplot(marathon, aes(x=Category, y=MarathonTime, group=Category)) +
geom_boxplot(aes(fill=Category))
gender_age
viz1 <- ggplot(marathon, aes(x=km4week, y=MarathonTime)) +
geom_point(color="navy", size = 2)
viz1
viz2 <- ggplot(marathon, aes(x=sp4week, y=MarathonTime)) +
geom_point(color="navy", size = 2)
viz2
install.packages("devtools")
library(tidyverse)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
str(marathon)
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
marathon <- marathon %>%
select(c(-Name, -Marathon))
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
head(marathon)
view(marathon)
# remove NAs
na.omit(marathon)
head(marathon)
view(marathon)
# remove NAs
na.omit(marathon)
# remove NAs
marathon <- na.omit(marathon)
head(marathon)
view(marathon)
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# head(marathon)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
marathon <- na.omit(marathon)
View(marathon)
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# view data
head(marathon)
view(marathon)
install.packages("roxygen2")
install.packages("usethis")
setwd("~/Desktop/GitHub/MarathonProject")
library(MarathonProject)
devtools::install_github('Garrett456/MarathonProject')
MarathonProject::marathon
MarathonProject::marathon %>% str()
str(MarathonProject::marathon)
?MarathonProject::marathon
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("/Users/garrett/Desktop/MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
# remove NA fields
marathon <- na.omit(marathon)
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# view data
#head(marathon)
view(marathon)
# Save the data frame to the data/ directory
usethis::use_data(marathon)
# Save the data frame to the data/ directory
usethis::use_data(marathon, overwrite = TRUE)
library(MarathonProject)
str(marathon)
str(marathon)
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("/Users/garrett/Desktop/MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
# remove NA fields
marathon <- na.omit(marathon)
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# view data
#head(marathon)
view(marathon)
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("/Users/garrett/Desktop/MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
View(marathon)
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
# remove NA fields
marathon <- na.omit(marathon)
# view data
#head(marathon)
view(marathon)
str(marathon)
# Save the data frame to the data/ directory
usethis::use_data(marathon, overwrite = TRUE)
str(marathon)
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("/Users/garrett/Desktop/MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# make these columns factors
marathon <- marathon %>%
mutate(Category = as.factor(Category)) %>%
mutate(CrossTraining = as.factor(CrossTraining)) %>%
mutate(FinishCategory = as.factor(FinishCategory))
# remove NA fields
marathon <- na.omit(marathon)
# view data
#head(marathon)
view(marathon)
str(marathon)
# Save the data frame to the data/ directory
usethis::use_data(marathon, overwrite = TRUE)
library(MarathonProject)
