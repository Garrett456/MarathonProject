# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
# view data
head(churn)
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname') )
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# view data
head(churn)
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "red", size = 4)
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4)
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) +
labs( title= "Correlation Heat Map", xlab=" ", ylab=" ")
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "orange", high = "red",
limit = c(-1,1), name="Correlation", mid = "yellow") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "grey", high = "darkred",
limit = c(-1,1), name="Correlation", mid = "orange") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
heat_map
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
# import data
churn <- read_csv("Churn_Modeling.csv")
# cleaning the data
# make gender numerical
churn$GenderNew <- if_else( churn$Gender == "Male", 1, 0 )
# remove irrelevant columns
churn <- churn %>% select( c(-'RowNumber', -'CustomerId', -'Surname', -'Gender') )
# view data
head(churn)
# create a correlation heat map
churn <- churn %>% select( c(-'Geography') )
corr <- round( cor(churn), 2 )
melted_corr <- melt(corr)
head(melted_corr)
heat_map <- ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 4) +
scale_fill_gradient2(low = "grey", high = "darkred",
limit = c(-1,1), name="Correlation", mid = "orange") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank()) +
labs( title = "Correlation Heat Map")
heat_map
heat_map
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
library(tidyverse)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
View(marathon)
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
marathon <- marathon %>%
select(c(-Name, -Marathon))
head(marathon)
as.numeric(marathon$Wall21)
head(marathon)
marathon$Wall21[marathon$Wall21 == ""] <- "None"
head(marathon)
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
head(marathon)
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
head(marathon)
head(marathon)
view(marathon)
gender_age <- ggplot(marathon, aes(x=Category, y=MarathonTime, group=Category)) +
geom_boxplot(aes(fill=Category))
gender_age
viz1 <- ggplot(marathon, aes(x=km4week, y=MarathonTime)) +
geom_point(color="navy", size = 2)
viz1
viz2 <- ggplot(marathon, aes(x=sp4week, y=MarathonTime)) +
geom_point(color="navy", size = 2)
viz2
install.packages("devtools")
library(tidyverse)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
head(marathon)
str(marathon)
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
marathon <- marathon %>%
select(c(-Name, -Marathon))
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
head(marathon)
view(marathon)
# remove NAs
na.omit(marathon)
head(marathon)
view(marathon)
# remove NAs
na.omit(marathon)
# remove NAs
marathon <- na.omit(marathon)
head(marathon)
view(marathon)
# load libraries
library(tidyverse)
# read in data
marathon = read.csv("MarathonData.csv", row.names=1, stringsAsFactors = FALSE)
# head(marathon)
# view data structure
str(marathon)
# this data field was messed up so I manually corrected it
marathon[marathon$Name=="Nathan Khan", "sp4week"] <- 11.125
# removed columns that won't be used
marathon <- marathon %>%
select(c(-Name, -Marathon))
# make the cross training column more readable
marathon$CrossTraining[marathon$CrossTraining == ""] <- "None"
# make this column numbers
marathon <- marathon %>%
mutate(Wall21 = as.numeric(Wall21))
marathon <- na.omit(marathon)
View(marathon)
# change some column names for readability
marathon <- marathon %>%
rename("FinishCategory" = CATEGORY) %>%
rename("Wall" = Wall21)
# view data
head(marathon)
view(marathon)
install.packages("roxygen2")
install.packages("usethis")
str(MarathonProject::marathon)
library(tidyverse)
# load data
paper = read.csv("paper_quality.csv", row.names=1)
View(paper)
# observations:
nrow(paper)
# variables:
ncol(paper)
# calculating the sample mean vector
x.bar = as.matrix(colMeans(companies))
# calculating the sample mean vector
x.bar = as.matrix(colMeans(paper))
x.bar
# calculating the covariance matrix
S = cov(paper)
S
R = cor(paper)
R
library(tidyverse)
library(GGally)
# producing a pairwise scatter plot for each pair of variables
ggpairs(paper,
upper = list(continuous = "points"),
diag = list(continuous = "blankDiag"),
lower = list(continuous = "blankDiag"))+
theme_bw()
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
Q2_matrix
# create matrix in r
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
inv(Q2_matrix)
library(tidyverse)
library(GGally)
library(matlib)
install.packages("matlib")
library(tidyverse)
library(GGally)
library(matlib)
# create matrix in r
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
inv(Q2_matrix)
# create matrix in r
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
inv(inv(Q2_matrix))
# create matrix in r
Q2_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
inv(Q2_matrix)
# create matrix in r
A_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
# calculate inverse matrix
inv(A_matrix)
# create matrix B by rounding each element of matrix A to 3 decimal places
B_matrix <- matrix( c(4.000, 4.001, 4.001, 4.002), 2, 2)
# calculate inverse matrix
inv(B_matrix)
matrix(c((1/5), 0, 0, 0, .5, 0, 0, 0, (1/3), 3, 3)
matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
inv(matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3))
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
a*b*a
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
a*b
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
c <- a
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
c <- a
c
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
c*a
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
d <- c*a
inv(a)*d*inv(a)
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
d <- c*a
d
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
d <- a*c
d
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
d <- c*a
d
a <- matrix(c(.5, 0, 0, 0, (1/3), 0, 0, 0, .2), 3, 3)
b <- matrix(c(4, 1, 2, 1, 9, -3, 2, -3, 25), 3, 3)
a*b*a
a <- matrix(c(.2, 0, 0, 0, .5, 0, 0, 0, 1/3), 3, 3)
b <- matrix(c(25, -2, 4, -2, 4, 1, 4, 1, 9), 3, 3)
c <- a*b
d <- c*a
d
inv(a)*d*inv(a)
install.packages("expm")
library(tidyverse)
library(GGally)
library(matlib)
library(expm)
sqrtm(b)
library(tidyverse)
library(GGally)
library(matlib)
library(expm)
# load data
paper = read.csv("paper_quality.csv", row.names=1)
# observations:
nrow(paper)
# variables:
ncol(paper)
# calculating the sample mean vector
x.bar = as.matrix(colMeans(paper))
x.bar
# calculating the covariance matrix
S = cov(paper)
S
# calculating the correlation matrix
R = cor(paper)
R
# producing a pairwise scatter plot for each pair of variables
ggpairs(paper,
upper = list(continuous = "points"),
diag = list(continuous = "blankDiag"),
lower = list(continuous = "blankDiag"))+
theme_bw()
# create matrix in r
A_matrix <- matrix( c(4.000000, 4.001000, 4.001000, 4.002001), 2, 2)
# calculate inverse matrix
inv(A_matrix)
# create matrix B by rounding each element of matrix A to 3 decimal places
B_matrix <- matrix( c(4.000, 4.001, 4.001, 4.002), 2, 2)
# calculate inverse matrix
inv(B_matrix)
setwd("~/Desktop/GitHub/MarathonProject")
library(tidyverse)
library(MarathonProject)
view(marathon)
gender_age <- ggplot(marathon, aes(x=Category, y=MarathonTime, group=Category)) +
geom_boxplot(aes(fill=Category))
gender_age
viz1 <- ggplot(marathon, aes(x=km4week, y=MarathonTime)) +
geom_point(color="navy", size = 2)
viz1
marathon <- marathon %>%
mutate(first_split_percent = (Wall/MarathonTime) )
View(marathon)
wall_percent <- ggplot(marathon, aes(x=first_split_percent, y=MarathonTime)) +
geom_point(color="red", size = 2)
wall_percent <- ggplot(marathon, aes(x=first_split_percent, y=MarathonTime)) +
geom_point(color="red", size = 2)
wall_percent
wall_percent <- ggplot(marathon, aes(x=MarathonTime, y=first_split_percent)) +
geom_point(color="red", size = 2)
wall_percent
viz1 <- ggplot(marathon, aes(y=MarathonTime, x=km4week)) +
geom_point(color="navy", size = 2)
viz1
viz1 <- ggplot(marathon, aes(x=MarathonTime, y=km4week)) +
geom_point(color="navy", size = 2)
viz1
marathon <- marathon %>%
mutate(first_split_percent = round(Wall/MarathonTime, 2) )
View(marathon)
marathon <- marathon %>%
mutate(first_split_percent = round(Wall/MarathonTime, 2)*100 )
View(marathon)
marathon <- marathon %>%
mutate(first_split_percent = round(Wall/MarathonTime*100, 2 )
marathon <- marathon %>%
mutate(first_split_percent = (Wall/MarathonTime*100) )
View(marathon)
marathon <- marathon %>%
mutate(first_split_percent = round((Wall/MarathonTime*100), 2) )
View(marathon)
wall_percent <- ggplot(marathon, aes(x=MarathonTime, y=first_split_percent)) +
geom_point(color="red", size = 2, aes(color=CrossTraining))
wall_percent
wall_percent <- ggplot(marathon, aes(x=MarathonTime, y=first_split_percent)) +
geom_point(color="red", size = 2, aes(color="CrossTraining"))
wall_percent
view(marathon)
str(marathon)
View(marathon)
marathon <- marathon %>%
mutate( X_Train = ifelse(CrossTraining=="None", "No", "Yes") )
View(marathon)
cross_train_plot <- ggplot(marathon, aes(x=cross_train_y_n, y=MarathonTime, group=cross_train_y_n)) +
geom_boxplot(aes(fill=cross_train_y_n))
gender_age
cross_train_plot <- ggplot(marathon, aes(x=Category, y=MarathonTime, group=Category)) +
geom_boxplot(aes(fill=Category))
gender_age
gender_age <- ggplot(marathon, aes(x=Category, y=MarathonTime, group=Category)) +
geom_boxplot(aes(fill=Category))
gender_age
cross_train_plot <- ggplot(marathon, aes(x=cross_train_y_n, y=MarathonTime, group=cross_train_y_n)) +
geom_boxplot(aes(fill=cross_train_y_n))
cross_train_plot <- ggplot(marathon, aes(x=cross_train_y_n, y=MarathonTime, group=cross_train_y_n)) +
geom_boxplot(aes(fill=cross_train_y_n))
cross_train_plot
marathon <- marathon %>%
mutate( cross_train_y_n = ifelse(CrossTraining=="None", "No", "Yes") )
View(marathon)
cross_train_plot <- ggplot(marathon, aes(x=cross_train_y_n, y=MarathonTime, group=cross_train_y_n)) +
geom_boxplot(aes(fill=cross_train_y_n))
cross_train_plot
